#SETUP - do not delete

lui t0, 0x12345
addi t0, t0, 0x678
sw t0, 0(x0)

lui t0, 0x13f44
addi t0, t0, 0x64c
sw t0, 4(x0)


#TODO 1
#reverse word at memaddr 0 with bitmasks, store in t0
#four registers for each byte
#bitmask to separate each, then shift to desired position
#OR together
#I likely could have made my program shorter; however, I wanted to use it in my own processor
# t0 - store original value for now
lw t0, 0(x0)
# Creating the bitmasks
addi x7, x0, 8 #number to shift by
addi x8, x0, 0xff
sll x9, x8, x7
sll x10, x9, x7
sll x11, x10, x7
# ANDing bitmasks with original value (t0)
and x8, x8, t0
and x9, x9, t0
and x10, x10, t0
and x11, x11, t0
# shifting them to their new position
sll x9, x9, x7
sra x10, x10, x7
addi x7, x7, 16
sll x8, x8, x7
sra x11, x11, x7
# adding the terms together (x8 - x11)
add t0, x8, x9
add t0, t0, x10
add t0, t0, x11

#TODO 2
#reverse word at memaddr 4 with lb/sb, store in t1
lb x1, 4(x0)
lb x2, 5(x0)
lb x3, 6(x0)
lb x4, 7(x0)
sb x1, 7(x0)
sb x2, 6(x0)
sb x3, 5(x0)
sb x4, 4(x0)
lw t1, 4(x0)

#TODO 3
#xor both reversed words, store in t2
xor t2, t0, t1
